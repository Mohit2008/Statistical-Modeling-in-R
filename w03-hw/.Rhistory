points(mean(cats$Bwt), mean(cats$Hwt), pch = "+", cex = 3)
summary(cat_model)
data(Ozone, package = "mlbench")
Ozone = Ozone[, c(4, 6, 7, 8)]
colnames(Ozone) = c("ozone", "wind", "humidity", "temp")
Ozone = Ozone[complete.cases(Ozone), ]
View(Ozone)
ozone_wind_model=lm(ozone~wind, data=Ozone)
summary(ozone_wind_model)$coefficients[2, "t value"]
summary(ozone_wind_model)$coefficients[2, "Pr(>|t|)"]
ozone_wind_model=lm(ozone~wind, data=Ozone)
summary(ozone_wind_model)
ozone_temp_model=lm(ozone~temp, data=Ozone)
summary(ozone_temp_model)$coefficients[2, "t value"]
summary(ozone_temp_model)$coefficients[2, "Pr(>|t|)"]
ozone_temp_model=lm(ozone~temp, data=Ozone)
summary(ozone_temp_model)
birthday = 19930501
set.seed(birthday)
n = 50
x = seq(0, 10, length = n)
beta_0  = -5
beta_1  = 3.25
sigma   = 4
sim_slr = function(x, beta_0 = -5, beta_1 = 3.25, sigma = 4) {
n = length(x)
epsilon = rnorm(n, mean = 0, sd = sigma)
y = beta_0 + beta_1 * x + epsilon
data.frame(predictor = x, response = y)
}
sim_data = sim_slr(x = x, beta_0 = -5, beta_1 = 3.25, sigma = 4)
beta_0  = -5
beta_1  = 3.25
sigma   = 4
sim_slr = function(x, beta_0 = -5, beta_1 = 3.25, sigma = 4) {
n = length(x)
epsilon = rnorm(n, mean = 0, sd = sigma)
y = beta_0 + beta_1 * x + epsilon
data.frame(predictor = x, response = y)
}
beta_hat_1 = rep(0, 2000)
beta_hat_0 = rep(0, 2000)
for (i in 1:2000){
sim_data = sim_slr(x = x, beta_0 = -5, beta_1 = 3.25, sigma = 4)
sim_fit = lm(response ~ predictor, data = sim_data)
beta_hat_0[i]=coef(sim_fit)[1]
beta_hat_1[i]=coef(sim_fit)[2]
}
beta_hat_0
beta_hat_1
birthday = 19930501
set.seed(birthday)
n = 50
x = seq(0, 10, length = n)
beta_0  = -5
beta_1  = 3.25
sigma   = 4
Sxx = sum((x - mean(x)) ^ 2)
sim_slr = function(x, beta_0 = -5, beta_1 = 3.25, sigma = 4) {
n = length(x)
epsilon = rnorm(n, mean = 0, sd = sigma)
y = beta_0 + beta_1 * x + epsilon
data.frame(predictor = x, response = y)
}
beta_hat_1 = rep(0, 2000)
beta_hat_0 = rep(0, 2000)
for (i in 1:2000){
sim_data = sim_slr(x = x, beta_0 = -5, beta_1 = 3.25, sigma = 4)
sim_fit = lm(response ~ predictor, data = sim_data)
beta_hat_0[i]=coef(sim_fit)[1]
beta_hat_1[i]=coef(sim_fit)[2]
}
mat <- matrix(, nrow = 4, ncol = 2)
colnames(mat) = c("beta_hat_0_estimator", "beta_hat_1_estimator")
mat[1, c(1,2)] <- c(-5, 3.25)
mat[2, c(1,2)] <- c(mean(beta_hat_0), mean(beta_hat_1))
mat[3, c(1,2)] <- c(4*sqrt(((1/50) + (mean(x)^2/sxx))),4/sqrt(sxx))
mat <- matrix(, nrow = 4, ncol = 2)
colnames(mat) = c("beta_hat_0_estimator", "beta_hat_1_estimator")
mat[1, c(1,2)] <- c(-5, 3.25)
mat[2, c(1,2)] <- c(mean(beta_hat_0), mean(beta_hat_1))
mat[3, c(1,2)] <- c(4*sqrt(((1/50) + (mean(x)^2/Sxx))),4/sqrt(Sxx))
mat[4, c(1,2)] <- c(sd(beta_hat_0), sd(beta_hat_1))
knitr::kable(mat)
mat <- matrix(, nrow = 4, ncol = 2)
colnames(mat) = c("beta_hat_0", "beta_hat_1")
mat[1, c(1,2)] <- c(-5, 3.25)
mat[2, c(1,2)] <- c(mean(beta_hat_0), mean(beta_hat_1))
mat[3, c(1,2)] <- c(4*sqrt(((1/50) + (mean(x)^2/Sxx))),4/sqrt(Sxx))
mat[4, c(1,2)] <- c(sd(beta_hat_0), sd(beta_hat_1))
knitr::kable(mat)
mat <- matrix(, nrow = 4, ncol = 2)
colnames(mat) = c("beta_hat_0", "beta_hat_1")
rownames(mat)=c("Epected Value", "Observed Mean", "True SD", "Observed SD")
mat[1, c(1,2)] <- c(-5, 3.25)
mat[2, c(1,2)] <- c(mean(beta_hat_0), mean(beta_hat_1))
mat[3, c(1,2)] <- c(4*sqrt(((1/50) + (mean(x)^2/Sxx))),4/sqrt(Sxx))
mat[4, c(1,2)] <- c(sd(beta_hat_0), sd(beta_hat_1))
knitr::kable(mat)
hist(beta_hat_0, prob = TRUE, breaks = 25,
xlab = expression(hat(beta)[0]), main = "", border = "dodgerblue")
curve(dnorm(x, mean = -5, sd = 4*sqrt(((1/50) + (mean(x)^2/Sxx)))),
col = "darkorange", add = TRUE, lwd = 3)
hist(beta_hat_1, prob = TRUE, breaks = 20,
xlab = expression(hat(beta)[1]), main = "", border = "dodgerblue")
curve(dnorm(x, mean = beta_1, sd = 4/sqrt(Sxx)),
col = "darkorange", add = TRUE, lwd = 3)
hist(beta_hat_0, prob = TRUE, breaks = 25,
xlab = expression(hat(beta)[0]), main = "", border = "dodgerblue")
curve(dnorm(x, mean = -5, sd = 4*sqrt(((1/50) + (mean(x)^2/Sxx)))),
col = "darkorange", add = TRUE, lwd = 3)
hist(beta_hat_1, prob = TRUE, breaks = 25,
xlab = expression(hat(beta)[1]), main = "", border = "dodgerblue")
curve(dnorm(x, mean = beta_1, sd = 4/sqrt(Sxx)),
col = "darkorange", add = TRUE, lwd = 3)
par(mfrow=c(1,2))
hist(beta_hat_0, prob = TRUE, breaks = 25,
xlab = expression(hat(beta)[0]), main = "", border = "dodgerblue")
curve(dnorm(x, mean = -5, sd = 4*sqrt(((1/50) + (mean(x)^2/Sxx)))),
col = "darkorange", add = TRUE, lwd = 3)
hist(beta_hat_1, prob = TRUE, breaks = 25,
xlab = expression(hat(beta)[1]), main = "", border = "dodgerblue")
curve(dnorm(x, mean = beta_1, sd = 4/sqrt(Sxx)),
col = "darkorange", add = TRUE, lwd = 3)
sim_data = sim_slr(x = x, beta_0 = 5, beta_1 = 2, sigma = 3)
sim_fit = lm(response ~ predictor, data = sim_data)
sim_fit
summary(sim_fit)
names(summary(sim_fit))
summary(sim_fit)$sigma
birthday = 19930501
set.seed(birthday)
n = 25
x = seq(0, 2.5, length = n)
beta_0  = 5
beta_1  = 2
sigma   = 3
Sxx = sum((x - mean(x)) ^ 2)
sim_slr = function(x, beta_0 = 5, beta_1 = 2, sigma = 3) {
n = length(x)
epsilon = rnorm(n, mean = 0, sd = sigma)
y = beta_0 + beta_1 * x + epsilon
data.frame(predictor = x, response = y)
}
beta_hat_1 = rep(0, 2500)
s_e_vec= rep(0, 2500)
for (i in 1:2500){
sim_data = sim_slr(x = x, beta_0 = 5, beta_1 = 2, sigma = 3)
sim_fit = lm(response ~ predictor, data = sim_data)
s_e_vec=summary(sim_fit)$sigma
beta_hat_1[i]=coef(sim_fit)[2]
}
beta_hat_1
Sxx
lower_95 = beta_hat_1-qt(97.5, df= n-2)*(s_e_vec/sqrt(Sxx))
upper_95 = beta_hat_1+qt(97.5, df= n-2, lower.tail = FALSE)*(s_e_vec/sqrt(Sxx))
beta_hat_1-qt(97.5, df= n-2)
qt(97.5, df= n-2)
n
(1-0.95)/2
0.95+0.025
qt(0.975, df= n-2)
lower_crit_value= qt(0.975, df= n-2)
upper_crit_value= qt(0.975, df= n-2, lower.tail = FALSE)
lower_95 = beta_hat_1-lower_crit_value*(s_e_vec/sqrt(Sxx))
upper_95 = beta_hat_1+upper_crit_value*(s_e_vec/sqrt(Sxx))
lower_95
upper_95
(2>lower_95) and (2< upper_95)
2>lower_95 and 2< upper_95
2>lower_95
2>lower_95 & 2< upper_95
sum(2>lower_95 & 2< upper_95)
mean(2>lower_95 & 2< upper_95)
2< upper_95
upper_95
qt(0.975, df= n-2, lower.tail = FALSE)
qt(0.975, df= n-2)
?qt
upper_crit_value= qt(0.975, df= n-2)
lower_crit_value= qt(0.975, df= n-2, lower.tail = FALSE)
lower_95 = beta_hat_1-lower_crit_value*(s_e_vec/sqrt(Sxx))
upper_95 = beta_hat_1+upper_crit_value*(s_e_vec/sqrt(Sxx))
upper_95
lower_95
upper_crit_value
lower_crit_value
crit_value= qt(0.975, df= n-2)
lower_95 = beta_hat_1-crit_value*(s_e_vec/sqrt(Sxx))
upper_95 = beta_hat_1+crit_value*(s_e_vec/sqrt(Sxx))
lower_95
upper_95
2< upper_95
2>lower_95
mean(2>lower_95 & 2< upper_95)
1-mean(2>lower_95 & 2< upper_95)
crit_value= qt(0.995, df= n-2)
lower_95 = beta_hat_1-crit_value*(s_e_vec/sqrt(Sxx))
upper_95 = beta_hat_1+crit_value*(s_e_vec/sqrt(Sxx))
crit_value= qt(0.995, df= n-2)
lower_99 = beta_hat_1-crit_value*(s_e_vec/sqrt(Sxx))
upper_99 = beta_hat_1+crit_value*(s_e_vec/sqrt(Sxx))
mean(2>lower_99 & 2< upper_99)
cat_model
cat_model$residuals
summary(cat_model)$sigma
names(cat_model)
cat_model$xlevels
cat_model$qr
cat_model$effects
names(cat_model)
cat_model$call
cat_model$model
cat_model$model[,2]
cat_model$model[,1]
cat_model$model[,2]
calc_pred_int <- function(model, newdata, level=0.95){
point_est= predict(model, newdata= newdata)
prop= level+((1-level)/2)
critic_value = qt(prop, df= lenght(model$residuals)-2)
s_e= summary(model)$sigma
x_vals= model$model[,2]
Sxx = sum((x_vals - mean(x_vals)) ^ 2)
lower= point_est - critic_value * s_e*(sqrt( 1+ (1/length(model$residuals)) + ((x_vals-mean(x_vals)^2)/Sxx)  ))
upper=   lower= point_est + critic_value * s_e*(sqrt( 1+ (1/length(model$residuals)) + ((x_vals-mean(x_vals)^2)/Sxx)  ))
return (list(estimate= point_est, lower=lower, upper=upper))
}
newcat_1 = data.frame(Bwt = 4.0)
calc_pred_int(cat_model, newcat_1)
calc_pred_int <- function(model, newdata, level=0.95){
point_est= predict(model, newdata= newdata)
prop= level+((1-level)/2)
critic_value = qt(prop, df= length(model$residuals)-2)
s_e= summary(model)$sigma
x_vals= model$model[,2]
Sxx = sum((x_vals - mean(x_vals)) ^ 2)
lower= point_est - critic_value * s_e*(sqrt( 1+ (1/length(model$residuals)) + ((x_vals-mean(x_vals)^2)/Sxx)  ))
upper=   lower= point_est + critic_value * s_e*(sqrt( 1+ (1/length(model$residuals)) + ((x_vals-mean(x_vals)^2)/Sxx)  ))
return (list(estimate= point_est, lower=lower, upper=upper))
}
newcat_1 = data.frame(Bwt = 4.0)
calc_pred_int(cat_model, newcat_1)
point_est - critic_value * s_e*(sqrt( 1+ (1/length(model$residuals)) + ((x_vals-mean(x_vals)^2)/Sxx)  ))
calc_pred_int <- function(model, newdata, level=0.95){
point_est= predict(model, newdata= newdata)
prop= level+((1-level)/2)
critic_value = qt(prop, df= length(model$residuals)-2)
s_e= summary(model)$sigma
x_vals= model$model[,2]
Sxx = sum((x_vals - mean(x_vals)) ^ 2)
lower= point_est - critic_value * s_e*(sqrt( 1+ (1/length(model$residuals)) + ((x_vals-mean(x_vals)^2)/Sxx)  ))
upper=   lower= point_est + critic_value * s_e*(sqrt( 1+ (1/length(model$residuals)) + ((x_vals-mean(x_vals)^2)/Sxx)  ))
return (list(estimate= point_est, lower=lower, upper=upper))
}
calc_pred_int <- function(model, newdata, level=0.95){
point_est= predict(model, newdata= newdata)
prop= level+((1-level)/2)
critic_value = qt(prop, df= length(model$residuals)-2)
s_e= summary(model)$sigma
x_vals= model$model[,2]
Sxx = sum((x_vals - mean(x_vals)) ^ 2)
lower= point_est - critic_value * (s_e*(sqrt( 1+ (1/length(model$residuals)) + ((x_vals-mean(x_vals)^2)/Sxx)  )))
upper=   lower= point_est + critic_value * (s_e*(sqrt( 1+ (1/length(model$residuals)) + ((x_vals-mean(x_vals)^2)/Sxx)  )))
return (list(estimate= point_est, lower=lower, upper=upper))
}
newcat_1 = data.frame(Bwt = 4.0)
calc_pred_int(cat_model, newcat_1)
calc_pred_int <- function(model, newdata, level=0.95){
point_est= predict(model, newdata= newdata)
prop= level+((1-level)/2)
critic_value = qt(prop, df= length(model$residuals)-2)
s_e= summary(model)$sigma
x_vals= model$model[,2]
Sxx = sum((x_vals - mean(x_vals)) ^ 2)
lower= point_est - critic_value * (s_e*(sqrt( 1+ (1/length(model$residuals)) + ((x_vals-mean(x_vals)^2)/Sxx)  )))
upper= point_est + critic_value * (s_e*(sqrt( 1+ (1/length(model$residuals)) + ((x_vals-mean(x_vals)^2)/Sxx)  )))
return (list(estimate= point_est, lower=lower, upper=upper))
}
newcat_1 = data.frame(Bwt = 4.0)
calc_pred_int(cat_model, newcat_1)
newcat_2 = data.frame(Bwt = 3.3)
calc_pred_int(cat_model, newcat_2, level = 0.99)
model= lm(Hwt~Bwt, data=cats)
newcat_1 = data.frame(Bwt = 4.0)
new_data= newcat_1
predict(model, newdata= newdata)
newdata= newcat_1
predict(model, newdata= newdata)
level=0.95
level+((1-level)/2)
qt(prop, df= length(model$residuals)-2)
prop= level+((1-level)/2)
qt(prop, df= length(model$residuals)-2)
summary(model)$sigma
model$model[,2]
sum((x_vals - mean(x_vals)) ^ 2)
x_vals= model$model[,2]
sum((x_vals - mean(x_vals)) ^ 2)
newdata
newdata$Bwt
calc_pred_int <- function(model, newdata, level=0.95){
point_est= predict(model, newdata= newdata)
prop= level+((1-level)/2)
critic_value = qt(prop, df= length(model$residuals)-2)
s_e= summary(model)$sigma
x_vals= model$model[,2]
Sxx = sum((x_vals - mean(x_vals)) ^ 2)
lower= point_est - critic_value * (s_e*(sqrt( 1+ (1/length(model$residuals)) + ((newdata$Bwt-mean(x_vals)^2)/Sxx)  )))
upper= point_est + critic_value * (s_e*(sqrt( 1+ (1/length(model$residuals)) + ((newdata$Bwt-mean(x_vals)^2)/Sxx)  )))
return (list(estimate= point_est, lower=lower, upper=upper))
}
newcat_1 = data.frame(Bwt = 4.0)
calc_pred_int(cat_model, newcat_1)
newcat_2 = data.frame(Bwt = 3.3)
calc_pred_int(cat_model, newcat_2, level = 0.99)
calc_pred_int <- function(model, newdata, level=0.95){
point_est= predict(model, newdata= newdata)
prop= level+((1-level)/2)
critic_value = qt(prop, df= length(model$residuals)-2)
s_e= summary(model)$sigma
x_vals= model$model[,2]
Sxx = sum((x_vals - mean(x_vals)) ^ 2)
lower= point_est - critic_value * (s_e*(sqrt( 1+ (1/length(model$residuals)) + ((newdata$Bwt-mean(x_vals)^2)/Sxx)  )))
upper= point_est + critic_value * (s_e*(sqrt( 1+ (1/length(model$residuals)) + ((newdata$Bwt-mean(x_vals)^2)/Sxx)  )))
print(predict(model, newdata = newdata, interval = c("prediction"), level = level))
return (list(estimate= point_est, lower=lower, upper=upper))
}
calc_pred_int <- function(model, newdata, level=0.95){
point_est= predict(model, newdata= newdata)
prop= level+((1-level)/2)
critic_value = qt(prop, df= length(model$residuals)-2)
s_e= summary(model)$sigma
x_vals= model$model[,2]
Sxx = sum((x_vals - mean(x_vals)) ^ 2)
lower= point_est - critic_value * (s_e*(sqrt( 1+ (1/length(model$residuals)) + ((newdata$Bwt-mean(x_vals)^2)/Sxx)  )))
upper= point_est + critic_value * (s_e*(sqrt( 1+ (1/length(model$residuals)) + ((newdata$Bwt-mean(x_vals)^2)/Sxx)  )))
print(predict(model, newdata = newdata, interval = c("prediction"), level = level))
return (list(estimate= point_est, lower=lower, upper=upper))
}
newcat_1 = data.frame(Bwt = 4.0)
calc_pred_int(cat_model, newcat_1)
newcat_2 = data.frame(Bwt = 3.3)
calc_pred_int(cat_model, newcat_2, level = 0.99)
calc_pred_int <- function(model, newdata, level=0.95){
point_est= predict(model, newdata= newdata)
prop= level+((1-level)/2)
critic_value = qt(prop, df= length(model$residuals)-2)
s_e= summary(model)$sigma
x_vals= model$model[,2]
Sxx = sum((x_vals - mean(x_vals)) ^ 2)
temp1= sqrt(1+ (1/length(resid(model)))  + ((newdata$Bwt-mean(x_vals))^2/ Sxx))
lower= point_est - critic_value * s_e*temp1
upper= point_est + critic_value * s_e*temp1
print(predict(model, newdata = newdata, interval = c("prediction"), level = level))
return (list(estimate= point_est, lower=lower, upper=upper))
}
newcat_1 = data.frame(Bwt = 4.0)
calc_pred_int(cat_model, newcat_1)
newcat_2 = data.frame(Bwt = 3.3)
calc_pred_int(cat_model, newcat_2, level = 0.99)
View(cats)
library(MASS)
cat_model = lm(Hwt~Bwt, data=cats)
summary(cat_model)
birthday = 19930501
set.seed(birthday)
n = 25
x = seq(0, 2.5, length = n)
beta_0  = 5
beta_1  = 2
sigma   = 3
Sxx = sum((x - mean(x)) ^ 2)
sim_slr = function(x, beta_0 = 5, beta_1 = 2, sigma = 3) {
n = length(x)
epsilon = rnorm(n, mean = 0, sd = sigma)
y = beta_0 + beta_1 * x + epsilon
data.frame(predictor = x, response = y)
}
beta_hat_1 = rep(0, 2500)
s_e_vec= rep(0, 2500)
c_int_range= rep(,2500)
beta_0  = 5
beta_1  = 2
sigma   = 3
Sxx = sum((x - mean(x)) ^ 2)
sim_slr = function(x, beta_0 = 5, beta_1 = 2, sigma = 3) {
n = length(x)
epsilon = rnorm(n, mean = 0, sd = sigma)
y = beta_0 + beta_1 * x + epsilon
data.frame(predictor = x, response = y)
}
beta_hat_1 = rep(0, 2500)
s_e_vec= rep(0, 2500)
c_int_range= rep(0,2500)
for (i in 1:2500){
sim_data = sim_slr(x = x, beta_0 = 5, beta_1 = 2, sigma = 3)
sim_fit = lm(response ~ predictor, data = sim_data)
s_e_vec=summary(sim_fit)$sigma
beta_hat_1[i]=coef(sim_fit)[2]
c_int_range[i]= confint(sim_fit, level=0.95)
}
c_int_range
onfint(sim_fit, level=0.95)
confint(sim_fit, level=0.95)
beta_0  = 5
beta_1  = 2
sigma   = 3
Sxx = sum((x - mean(x)) ^ 2)
sim_slr = function(x, beta_0 = 5, beta_1 = 2, sigma = 3) {
n = length(x)
epsilon = rnorm(n, mean = 0, sd = sigma)
y = beta_0 + beta_1 * x + epsilon
data.frame(predictor = x, response = y)
}
beta_hat_1 = rep(0, 1)
s_e_vec= rep(0, 1)
c_int_range= rep(0,1)
for (i in 1:1){
sim_data = sim_slr(x = x, beta_0 = 5, beta_1 = 2, sigma = 3)
sim_fit = lm(response ~ predictor, data = sim_data)
s_e_vec=summary(sim_fit)$sigma
beta_hat_1[i]=coef(sim_fit)[2]
c_int_range[i]= confint(sim_fit, level=0.95)
}
crit_value= qt(0.975, df= n-2)
lower_95 = beta_hat_1-crit_value*(s_e_vec/sqrt(Sxx))
upper_95 = beta_hat_1+crit_value*(s_e_vec/sqrt(Sxx))
lower_95
upper_95
c_int_range
beta_0  = 5
beta_1  = 2
sigma   = 3
Sxx = sum((x - mean(x)) ^ 2)
sim_slr = function(x, beta_0 = 5, beta_1 = 2, sigma = 3) {
n = length(x)
epsilon = rnorm(n, mean = 0, sd = sigma)
y = beta_0 + beta_1 * x + epsilon
data.frame(predictor = x, response = y)
}
beta_hat_1 = rep(0, 1)
s_e_vec= rep(0, 1)
c_int_range= rep(0,1)
for (i in 1:1){
sim_data = sim_slr(x = x, beta_0 = 5, beta_1 = 2, sigma = 3)
sim_fit = lm(response ~ predictor, data = sim_data)
s_e_vec=summary(sim_fit)$sigma
beta_hat_1[i]=coef(sim_fit)[2]
print( confint(sim_fit, level=0.95))
}
crit_value= qt(0.975, df= n-2)
lower_95 = beta_hat_1-crit_value*(s_e_vec/sqrt(Sxx))
upper_95 = beta_hat_1+crit_value*(s_e_vec/sqrt(Sxx))
lower_95
upper_95
library(MASS)
cat_model = lm(Hwt~Bwt, data=cats)
summary(cat_model)$coefficients[2, "t value"]
summary(cat_model)$coefficients[2, "Pr(>|t|)"]
confint(cat_model,parm="Bwt",level=0.90)
confint(cat_model,parm="(Intercept)",level=0.99)
predict(cat_model, newdata = data.frame(Bwt=c(2.1, 2.8)), interval = c("confidence"), level = 0.99)
predict(cat_model, newdata = data.frame(Bwt=c(2.8, 4.2)), interval = c("prediction"), level = 0.99)
body_wt_grid = seq(min(cats$Bwt), max(cats$Bwt), by = 0.01)
dist_ci_band = predict(cat_model,
newdata = data.frame(Bwt = body_wt_grid),
interval = "confidence", level = 0.90)
dist_pi_band = predict(cat_model,
newdata = data.frame(Bwt = body_wt_grid),
interval = "prediction", level = 0.90)
plot(Hwt ~ Bwt, data = cats,
xlab = "Body weight of cats in kg",
ylab = "Heart weight of cats in g",
main = "Heart weight vs Body weight",
pch  = 20,
cex  = 2,
col  = "grey",
ylim = c(min(dist_pi_band), max(dist_pi_band)))
abline(cat_model, lwd = 5, col = "darkorange")
lines(body_wt_grid, dist_ci_band[,"lwr"], col = "dodgerblue", lwd = 3, lty = 2)
lines(body_wt_grid, dist_ci_band[,"upr"], col = "dodgerblue", lwd = 3, lty = 2)
lines(body_wt_grid, dist_pi_band[,"lwr"], col = "dodgerblue", lwd = 3, lty = 3)
lines(body_wt_grid, dist_pi_band[,"upr"], col = "dodgerblue", lwd = 3, lty = 3)
points(mean(cats$Bwt), mean(cats$Hwt), pch = "+", cex = 3)
cat_model
coef(cat_model)
coef(cat_model)[,2]
coef(cat_model)[,"Bwt"]
coef(cat_model)["Bwt"]
coef(cat_model)[["Bwt"]]
x= cats$Bwt
Sxx = sum((x - mean(x)) ^ 2)
se= summary(cat_model)$sigma/Sxx
t_stat= (coef(cat_model)[["Bwt"]]-4)/se
t_stat
x= cats$Bwt
Sxx = sum((x - mean(x)) ^ 2)
se= summary(cat_model)$sigma/Sxx
t_stat= (coef(cat_model)[["Bwt"]]-4)/se
t_stat
pt(t_stat, df= length(x)-2)
qt(0.995, df = length(resid(stop_dist_model)) - 2)
qt(0.995, df = 5)
pt(4.032143, df=5)
pt(4.032143, df=5)*2
pt(4.032143, df=5)/2
pt(4.032143, df=5)
pt(4.032143, df=5)- (1-pt(4.032143, df=5))
pt(4.032143, df=5, lower.tail = FALSE)*2
pt(4.032143, df=5, lower.tail = FALSE)
pt(4.032143, df=5, lower.tail = FALSE)*2
2*pt(t_stat, df= length(x)-2, lower.tail = FALSE)
