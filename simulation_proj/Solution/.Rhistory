hist(test_stat_beta2)
curve(dnorm(x, mean=0, sd=1),
col="darkblue", lwd=2, add=TRUE)
hist(test_stat_beta2)
curve(dnorm(x, mean=0, sd=2),
col="darkblue", lwd=2, add=TRUE)
hist(test_stat_beta2)
curve(dnorm(x, mean=0, sd=1),
col="darkblue", lwd=2, add=TRUE)
hist(test_stat_beta2, prob=TRUE)
curve(dnorm(x, mean=0, sd=1),
col="darkblue", lwd=2, add=TRUE)
hist(test_stat_beta2, prob=TRUE,xlab = "Test statistic for beta_2", main = "Histogram of empirical values for the Wald test statistic", border = "black", col="dodgerblue")
curve(dnorm(x, mean=0, sd=1),
col="orange", lwd=2, add=TRUE)
sd(test_stat_beta2)
pnorm(1, mean=mean(test_stat_beta2), sd=sd(test_stat_beta2), lower.tail = FALSE)
pnorm(1, mean=mean(test_stat_beta2), sd=sd(test_stat_beta2), lower.tail = TRUE)
pnorm(1, mean=0, sd=1, lower.tail = FALSE)
pnorm(1, mean=mean(test_stat_beta2), sd=sd(test_stat_beta2), lower.tail = FALSE)
hist(likelihood_test_stat, prob=TRUE,xlab = "Test statistic for Likelihood ratio test", main = "Histogram of empirical values for the likelihood ratio test statistic", border = "black", col="dodgerblue")
hist(likelihood_test_stat, prob=TRUE,xlab = "Test statistic for Likelihood ratio test", main = "Histogram of empirical values for the likelihood ratio test statistic", border = "black", col="dodgerblue")
curve( dchisq(x, df=2), col='red')
hist(likelihood_test_stat, prob=TRUE,xlab = "Test statistic for Likelihood ratio test", main = "Histogram of empirical values for the likelihood ratio test statistic", border = "black", col="dodgerblue")
curve( dchisq(x, df=2), col='red', add=TRUE)
hist(likelihood_test_stat, prob=TRUE,xlab = "Test statistic for Likelihood ratio test", main = "Histogram of empirical values for the likelihood ratio test statistic", border = "black", col="dodgerblue")
curve( dchisq(x, df=2), col='orange', add=TRUE, lwd=3)
hist(likelihood_test_stat, prob=TRUE,xlab = "Test statistic for Likelihood ratio test", main = "Histogram of empirical values for the likelihood ratio test statistic", border = "black", col="dodgerblue", ylab=c(0.0,1.0))
curve( dchisq(x, df=2), col='orange', add=TRUE, lwd=3)
hist(likelihood_test_stat, prob=TRUE,xlab = "Test statistic for Likelihood ratio test", main = "Histogram of empirical values for the likelihood ratio test statistic", border = "black", col="dodgerblue", ylim=c(0.0,1.0))
curve( dchisq(x, df=2), col='orange', add=TRUE, lwd=3)
hist(likelihood_test_stat, prob=TRUE,xlab = "Test statistic for Likelihood ratio test", main = "Histogram of empirical values for the likelihood ratio test statistic", border = "black", col="dodgerblue")
curve( dchisq(x, df=2), col='orange', add=TRUE, lwd=3)
pchisq(5, df=2, lower.tail = FALSE)
pchisq(5, df=2, lower.tail = FALSE)
# install.packages("rpart")
# install.packages("rpart.plot")
library(rpart)
library(rpart.plot)
data("ptitanic")
ptitanic = na.omit(ptitanic)
set.seed(42)
trn_idx = sample(nrow(ptitanic), 300)
ptitanic_trn = ptitanic[trn_idx, ]
ptitanic_tst = ptitanic[-trn_idx, ]
View(ptitanic_trn)
tita_mod=glm(survived~pclass+sex+age, data= ptitanic_trn, family="binomial")
tita_mod
names(summary(tita_mod))
summary(tita_mod)[["deviance"]]
tita_mod=glm(survived~pclass+sex+age, data= ptitanic_trn, family="binomial")
deviance(tita_mod)
summary(tita_mod)
tita_mod_null=glm(survived~sex+age, data= ptitanic_trn, family="binomial")
anova(tita_mod_null, tita_mod, test="LRT")
tita_mod_null=glm(survived~sex+age, data= ptitanic_trn, family="binomial")
anova(tita_mod_null, tita_mod, test="LRT")[["Deviance"]]
tita_mod_null=glm(survived~sex+age, data= ptitanic_trn, family="binomial")
anova(tita_mod_null, tita_mod, test="LRT")[["Deviance"]][2]
anova(tita_mod_null, tita_mod, test="LRT")
anova(tita_mod_null, tita_mod, test="LRT")[["Pr(>Chi) "]]
anova(tita_mod_null, tita_mod, test="LRT")[["Pr(>Chi)"]]
anova(tita_mod_null, tita_mod, test="LRT")[["Pr(>Chi)"]][2]
tita_mod_int=glm(survived~pclass+sex+age+sex:age, data= ptitanic_trn, family="binomial")
anova(tita_mod,tita_mod_int, test="LRT")[["Deviance"]][2]
anova(tita_mod,tita_mod_int, test="LRT")[["Pr(>Chi)"]][2]
predict_test= predict(tita_mod, newdata = ptitanic_tst, type="response")
predict_test
ptitanic_trn$survived
as.numeirc(ptitanic_trn$survived)
as.numeric(ptitanic_trn$survived)
mean(predict_test_class= ptitanic_tst$survived)
mean(predict_test_class==ptitanic_tst$survived)
predict_test= predict(tita_mod, newdata = ptitanic_tst, type="response")
predict_test_class=ifelse(predict_test>0.5, "survived", "died")
mean(predict_test_class==ptitanic_tst$survived)
predict_test= predict(tita_mod, newdata = ptitanic_tst, type="response")
predict_test_class=ifelse(predict_test>0.5, "survived", "died")
1-mean(predict_test_class==ptitanic_tst$survived)
make_conf_mat = function(predicted, actual) {
table(predicted = predicted, actual = actual)
}
conf_mat_50 = make_conf_mat(predicted = predict_test_class, actual = ptitanic_tst$survived)
conf_mat_50
make_conf_mat = function(predicted, actual) {
table(predicted = predicted, actual = actual)
}
# function to get sensitivity
get_sens = function(conf_mat) {
conf_mat[2, 2] / sum(conf_mat[, 2])
}
# function to get specificity
get_spec =  function(conf_mat) {
conf_mat[1, 1] / sum(conf_mat[, 1])
}
conf_mat_50 = make_conf_mat(predicted = predict_test_class, actual = ptitanic_tst$survived)
get_sens(conf_mat_50)
get_spec(conf_mat_50)
wisc_train <- read.csv(file="wisc-train.csv",header=TRUE, sep=",")
wisc_test <- read.csv(file="wisc-test.csv",header=TRUE, sep=",")
View(wisc_train)
wisc_train <- read.csv(file="wisc-train.csv",header=TRUE, sep=",")
wisc_test <- read.csv(file="wisc-test.csv",header=TRUE, sep=",")
is.factor(wisc_train$class)
wisc_train <- read.csv(file="wisc-train.csv",header=TRUE, sep=",")
wisc_test <- read.csv(file="wisc-test.csv",header=TRUE, sep=",")
is.factor(wisc_train$class)
mod1=glm(class~radius+smoothness+texture, data= wisc_train, family="binomial")
mod2=glm(class~., data= wisc_train, family="binomial")
mod3_start=glm(class~.^2, data= wisc_train, family="binomial")
mod3=step(mod3_start, trace=0, direction="backward")
mod1=glm(class~radius+smoothness+texture, data= wisc_train, family="binomial")
mod2=glm(class~., data= wisc_train, family="binomial")
mod3_start=glm(class~.^2, data= wisc_train, family="binomial")
mod3=step(mod3_start, trace=0, direction="backward")
mod1=glm(class~radius+smoothness+texture, data= wisc_train, family="binomial")
mod2=glm(class~., data= wisc_train, family="binomial")
mod3_start=glm(class~.^2, data= wisc_train, family="binomial")
mod3=step(mod3_start, trace=0, direction="backward")
mod1=glm(class~radius+smoothness+texture, data= wisc_train, family="binomial")
mod2=glm(class~., data= wisc_train, family="binomial")
mod3_start=glm(class~.^2, data= wisc_train, family="binomial")
mod3=step(mod3_start, trace=0, direction="backward")
boot::cv.glm(wisc_train, mod1, K = 5)$delta[1]
boot::cv.glm(wisc_train, mod2, K = 5)$delta[1]
boot::cv.glm(wisc_train, mod3, K = 5)$delta[1]
boot::cv.glm(wisc_test, mod1, K = 5)$delta[1]
boot::cv.glm(wisc_train, mod1, K = 5)$delta[1]
boot::cv.glm(wisc_train, mod1, K = 5)$delta[1]
boot::cv.glm(wisc_train, mod1, K = 5)$delta[1]
boot::cv.glm(wisc_test, mod1, K = 5)$delta[1]
dim(wisc_train)
dim(wisc_test)
as.numeric(wisc_train$class)
wisc_train$class
predict_test= predict(mod1, newdata = wisc_test, type="response")
predict_test_class=ifelse(predict_test>0.5, "M", "B")
1-mean(predict_test_class==wisc_test$class)
cutoffs = seq(0.01, 0.99, by = 0.01)
cutoffs
cutoffs = seq(0.01, 0.99, by = 0.01)
sensitivity_val=rep(0, length(cutoffs))
specificity_val=rep(0, length(cutoffs))
i=1
predict_test= predict(mod1, newdata = wisc_test, type="response")
for (cut in cutoffs){
predict_test_class=ifelse(predict_test>cut, "M", "B")
conf_mat_50 = make_conf_mat(predicted = predict_test_class, actual = wisc_test$class)
sensitivity_val[i]=get_sens(conf_mat_50)
specificity_val[i]=get_spec(conf_mat_50)
i=i+1
}
sensitivity_val
plot(cutoffs, sensitivity_val)
plot(cutoffs, sensitivity_val, col="darkorange",
xlab="Different cut off values",
main="Effect of cutoff values on sensitivity and specificity",
pch=20,
cex=5,type="l")
plot(cutoffs, sensitivity_val, col="darkorange",
xlab="Different cut off values",
main="Effect of cutoff values on sensitivity and specificity",
pch=20,
cex=5,type="o")
plot(cutoffs, sensitivity_val, col="darkorange",
xlab="Different cut off values",
main="Effect of cutoff values on sensitivity and specificity",
pch=20,
cex=5,type="l")
plot(cutoffs, sensitivity_val, col="darkorange",
xlab="Different cut off values",
main="Effect of cutoff values on sensitivity and specificity",
pch=20,
cex=5,type="l")
plot(cutoffs, specificity_val, col="darkorange",
pch=20,
cex=5,type="l")
plot(cutoffs, sensitivity_val, col="darkorange",
xlab="Different cut off values",
main="Effect of cutoff values on sensitivity and specificity",
pch=20,
cex=5,type="l")
plot(cutoffs, specificity_val, col="dodgerblue",
pch=20,
cex=5,type="l")
plot(cutoffs, sensitivity_val, col="darkorange",
xlab="Different cut off values",
main="Effect of cutoff values on sensitivity and specificity",
pch=20,
cex=5,type="l")
lines(cutoffs, specificity_val, col="dodgerblue", cex=5, pch=20)
plot(cutoffs, sensitivity_val, col="darkorange",
xlab="Different cut off values",
main="Effect of cutoff values on sensitivity and specificity",
pch=20,
cex=5,type="l")
lines(cutoffs, specificity_val, col="dodgerblue", cex=5, pch=20)
legend("topright", c("Sensitivity", "Specificity"), lty = c(1, 1), lwd = 2,
col = c("darkorange", "dodgerblue"))
plot(cutoffs, sensitivity_val, col="darkorange",
xlab="Different cut off values",
main="Effect of cutoff values on sensitivity and specificity",
pch=20,
cex=5,type="l")
lines(cutoffs, specificity_val, col="dodgerblue", cex=5, pch=20)
legend("bottomright", c("Sensitivity", "Specificity"), lty = c(1, 1), lwd = 2,
col = c("darkorange", "dodgerblue"))
range(sensitivity_val)
range(specificity_val)
plot(cutoffs, sensitivity_val, col="darkorange",
xlab="Different cut off values",
main="Effect of cutoff values on sensitivity and specificity",
pch=20,
cex=5,type="l", ylim=c(0.2, 1.0))
lines(cutoffs, specificity_val, col="dodgerblue", cex=5, pch=20)
legend("bottomright", c("Sensitivity", "Specificity"), lty = c(1, 1), lwd = 2,
col = c("darkorange", "dodgerblue"))
plot(cutoffs, sensitivity_val, col="darkorange",
xlab="Different cut off values",
main="Effect of cutoff values on sensitivity and specificity",
pch=20,
cex=5,type="l", ylim=c(0.3, 1.0))
lines(cutoffs, specificity_val, col="dodgerblue", cex=5, pch=20)
legend("bottomright", c("Sensitivity", "Specificity"), lty = c(1, 1), lwd = 2,
col = c("darkorange", "dodgerblue"))
plot(cutoffs, sensitivity_val, col="darkorange",
xlab="Different cut off values",
ylab="Sensitivity and Specificity",
main="Effect of cutoff values on sensitivity and specificity",
pch=20,
cex=5,type="l", ylim=c(0.3, 1.0))
lines(cutoffs, specificity_val, col="dodgerblue", cex=5, pch=20)
legend("bottomright", c("Sensitivity", "Specificity"), lty = c(1, 1), lwd = 2,
col = c("darkorange", "dodgerblue"))
tita_mod=glm(survived~pclass+sex+age+age:sex, data= ptitanic_trn, family="binomial")
deviance(tita_mod)
ptitanic = na.omit(ptitanic)
set.seed(42)
trn_idx = sample(nrow(ptitanic), 300)
ptitanic_trn = ptitanic[trn_idx, ]
ptitanic_tst = ptitanic[-trn_idx, ]
tita_mod=glm(survived~pclass+sex+age+age:sex, data= ptitanic_trn, family="binomial")
deviance(tita_mod)
tita_mod=glm(survived~pclass+sex+age+age:sex, data= ptitanic_trn, family="binomial")
deviance(tita_mod)
# install.packages("rpart")
# install.packages("rpart.plot")
library(rpart)
library(rpart.plot)
data("ptitanic")
ptitanic = na.omit(ptitanic)
set.seed(42)
trn_idx = sample(nrow(ptitanic), 300)
ptitanic_trn = ptitanic[trn_idx, ]
ptitanic_tst = ptitanic[-trn_idx, ]
tita_mod=glm(survived~pclass+sex+age+age:sex, data= ptitanic_trn, family="binomial")
deviance(tita_mod)
tita_mod_null=glm(survived~sex+age, data= ptitanic_trn, family="binomial")
anova(tita_mod_null, tita_mod, test="LRT")[["Deviance"]][2]
anova(tita_mod_null, tita_mod, test="LRT")[["Pr(>Chi)"]][2]
tita_mod_wint=glm(survived~pclass+sex+age, data= ptitanic_trn, family="binomial")
anova(tita_mod,tita_mod_int, test="LRT")[["Deviance"]][2]
tita_mod_wint=glm(survived~pclass+sex+age, data= ptitanic_trn, family="binomial")
anova(tita_mod_wint,tita_mod, test="LRT")[["Deviance"]][2]
anova(tita_mod_wint,tita_mod, test="LRT")[["Pr(>Chi)"]][2]
tita_mod=glm(survived~pclass+sex+age+age:sex, data= ptitanic_trn, family="binomial")
tita_mod
wisc_train <- read.csv(file="wisc-train.csv",header=TRUE, sep=",")
wisc_test <- read.csv(file="wisc-test.csv",header=TRUE, sep=",")
is.factor(wisc_train$class)
set.seed(5)
mod1=glm(class~radius+smoothness+texture, data= wisc_train, family="binomial")
mod2=glm(class~., data= wisc_train, family="binomial")
mod3_start=glm(class~.^2, data= wisc_train, family="binomial")
mod3=step(mod3_start, trace=0, direction="backward")
boot::cv.glm(wisc_train, mod1, K = 5)$delta[1]
boot::cv.glm(wisc_train, mod2, K = 5)$delta[1]
boot::cv.glm(wisc_train, mod3, K = 5)$delta[1]
set.seed(5)
mod1=glm(class~radius+smoothness+texture, data= wisc_train, family="binomial")
mod2=glm(class~., data= wisc_train, family="binomial")
mod3_start=glm(class~.^2, data= wisc_train, family="binomial")
mod3=step(mod3_start, trace=0, direction="backward")
boot::cv.glm(wisc_train, mod1, K = 5)$delta[1]
boot::cv.glm(wisc_train, mod2, K = 5)$delta[1]
boot::cv.glm(wisc_train, mod3, K = 5)$delta[1]
sample_size = 10
set.seed(420)
x1 = rnorm(n = sample_size)
x2 = rnorm(n = sample_size)
x3 = rnorm(n = sample_size)
sim_logistic_data = function(sample_size = sample_size, beta_0, beta_1) {
eta = beta_0 + beta_1 * x1
p = 1 / (1 + exp(-eta))
y = rbinom(n = sample_size, size = 1, prob = p)
data.frame(y, x1,x2,x3)
}
test_stat_beta2=rep(0,2500)
likelihood_test_stat=rep(0,2500)
for (i in 1:2500){
dataset=sim_logistic_data(sample_size = sample_size, beta_0 = 0.4, beta_1 = -0.35)
sim_mod= glm(y~., data=dataset, family = "binomial")
test_stat_beta2[i]=summary(sim_mod)[["coefficients"]][3, 3]
true_mod=glm(y~x1,data=dataset, family = "binomial" )
anova_test=anova(true_mod, sim_mod, test="LRT")
likelihood_test_stat[i]=anova_test[["Deviance"]][2]
}
sim_logistic_data = function(sample_size = sample_size, beta_0, beta_1) {
eta = beta_0 + beta_1 * x1
p = 1 / (1 + exp(-eta))
y = rbinom(n = sample_size, size = 1, prob = p)
data.frame(y, x1,x2,x3)
}
test_stat_beta2=rep(0,2500)
likelihood_test_stat=rep(0,2500)
for (i in 1:2500){
dataset=sim_logistic_data(sample_size = sample_size, beta_0 = 0.4, beta_1 = -0.35)
sim_mod= glm(y~., data=dataset, family = "binomial")
test_stat_beta2[i]=summary(sim_mod)[["coefficients"]][3, 3]
true_mod=glm(y~x1,data=dataset, family = "binomial" )
anova_test=anova(true_mod, sim_mod, test="LRT")
likelihood_test_stat[i]=anova_test[["Deviance"]][2]
}
hist(test_stat_beta2, prob=TRUE,xlab = "Test statistic for beta_2", main = "Histogram of empirical values for the Wald test statistic", border = "black", col="dodgerblue")
curve(dnorm(x, mean=0, sd=1),
col="orange", lwd=2, add=TRUE)
hist(likelihood_test_stat, prob=TRUE,xlab = "Test statistic for Likelihood ratio test", main = "Histogram of empirical values for the likelihood ratio test statistic", border = "black", col="dodgerblue")
curve( dchisq(x, df=2), col='orange', add=TRUE, lwd=3)
mod1=glm(am~mpg+hp+qsec, data=mtcars, family="binomial")
coef(mod1)
summary(mod1)
lrtest(mod1)
anova(glm(am~1, data=mtcars, family="binomial"), mod1)
anova(glm(am~1, data=mtcars, family="binomial"), mod1, test="LRT")
lrtest(mod1)
names(lrtest(mod1))
lrtest(mod1)[["Chisq"]]
summary(mod1)
summary(mod1)[["coefficients"]]
summary(mod1)[["coefficients"]][3,]
summary(mod1)[["coefficients"]][3,4]
library(MASS)
make_conf_mat = function(predicted, actual) {
table(predicted = predicted, actual = actual)
}
get_sens = function(conf_mat) {
conf_mat[2, 2] / sum(conf_mat[, 2])
}
mod=glm(type~., data=Pima.tr, family="binomial")
nb_test_predict= predict(mod, newdata=Pima.te, type="response")
conf_mat_50 = make_conf_mat(predicted = nb_test_predict, actual = Pima.te$type)
conf_mat_50
library(MASS)
make_conf_mat = function(predicted, actual) {
table(predicted = predicted, actual = actual)
}
get_sens = function(conf_mat) {
conf_mat[2, 2] / sum(conf_mat[, 2])
}
mod=glm(type~., data=Pima.tr, family="binomial")
nb_test_predict= predict(mod, newdata=Pima.te, type="response")
nb_test_predict
Pima.te$type
test_pred=ifelse(predict(fit_additive, spam_tst, type = "response") > 0.5,
"Yes",
"No")
test_pred=ifelse(predict(mod, spam_tst, type = "response") > 0.5,
"Yes",
"No")
test_pred=ifelse(predict(mod, Pima.te, type = "response") > 0.5,
"Yes",
"No")
test_pred
conf_mat_50 = make_conf_mat(predicted = test_pred, actual = Pima.te$type)
conf_mat_50
mean(likelihood_test_stat>5)
sample_size = 150
set.seed(420)
x1 = rnorm(n = sample_size)
x2 = rnorm(n = sample_size)
x3 = rnorm(n = sample_size)
sim_logistic_data = function(sample_size = sample_size, beta_0, beta_1) {
eta = beta_0 + beta_1 * x1
p = 1 / (1 + exp(-eta))
y = rbinom(n = sample_size, size = 1, prob = p)
data.frame(y, x1,x2,x3)
}
test_stat_beta2=rep(0,2500)
likelihood_test_stat=rep(0,2500)
for (i in 1:2500){
dataset=sim_logistic_data(sample_size = sample_size, beta_0 = 0.4, beta_1 = -0.35)
sim_mod= glm(y~., data=dataset, family = "binomial")
test_stat_beta2[i]=summary(sim_mod)[["coefficients"]][3, 3]
true_mod=glm(y~x1,data=dataset, family = "binomial" )
anova_test=anova(true_mod, sim_mod, test="LRT")
likelihood_test_stat[i]=anova_test[["Deviance"]][2]
}
hist(test_stat_beta2, prob=TRUE,xlab = "Test statistic for beta_2", main = "Histogram of empirical values for the Wald test statistic", border = "black", col="dodgerblue")
curve(dnorm(x, mean=0, sd=1),
col="orange", lwd=2, add=TRUE)
pnorm(1, mean=mean(test_stat_beta2), sd=sd(test_stat_beta2), lower.tail = FALSE)
pnorm(1, mean=0, sd=1, lower.tail = FALSE)
hist(likelihood_test_stat, prob=TRUE,xlab = "Test statistic for Likelihood ratio test", main = "Histogram of empirical values for the likelihood ratio test statistic", border = "black", col="dodgerblue")
curve( dchisq(x, df=2), col='orange', add=TRUE, lwd=3)
mean(likelihood_test_stat>5)
pnorm(1, mean=mean(test_stat_beta2), sd=sd(test_stat_beta2), lower.tail = FALSE)
mean(test_stat_beta2>1)
mean(test_stat_beta2>1)
sample_size = 10
set.seed(420)
x1 = rnorm(n = sample_size)
x2 = rnorm(n = sample_size)
x3 = rnorm(n = sample_size)
sim_logistic_data = function(sample_size = sample_size, beta_0, beta_1) {
eta = beta_0 + beta_1 * x1
p = 1 / (1 + exp(-eta))
y = rbinom(n = sample_size, size = 1, prob = p)
data.frame(y, x1,x2,x3)
}
test_stat_beta2=rep(0,2500)
likelihood_test_stat=rep(0,2500)
for (i in 1:2500){
dataset=sim_logistic_data(sample_size = sample_size, beta_0 = 0.4, beta_1 = -0.35)
sim_mod= glm(y~., data=dataset, family = "binomial")
test_stat_beta2[i]=summary(sim_mod)[["coefficients"]][3, 3]
true_mod=glm(y~x1,data=dataset, family = "binomial" )
anova_test=anova(true_mod, sim_mod, test="LRT")
likelihood_test_stat[i]=anova_test[["Deviance"]][2]
}
hist(test_stat_beta2, prob=TRUE,xlab = "Test statistic for beta_2", main = "Histogram of empirical values for the Wald test statistic", border = "black", col="dodgerblue")
curve(dnorm(x, mean=0, sd=1),
col="orange", lwd=2, add=TRUE)
hist(likelihood_test_stat, prob=TRUE,xlab = "Test statistic for Likelihood ratio test", main = "Histogram of empirical values for the likelihood ratio test statistic", border = "black", col="dodgerblue")
curve( dchisq(x, df=2), col='orange', add=TRUE, lwd=3)
mean(test_stat_beta2>1)
pnorm(1, mean=0, sd=1, lower.tail = FALSE)
wisc_train <- read.csv(file="wisc-train.csv",header=TRUE, sep=",")
wisc_test <- read.csv(file="wisc-test.csv",header=TRUE, sep=",")
is.factor(wisc_train$class)
mod1=glm(class~radius+smoothness+texture, data= wisc_train, family="binomial")
mod2=glm(class~., data= wisc_train, family="binomial")
mod3_start=glm(class~.^2, data= wisc_train, family="binomial")
mod3=step(mod3_start, trace=0, direction="backward")
boot::cv.glm(wisc_train, mod1, K = 5)$delta[1]
boot::cv.glm(wisc_train, mod2, K = 5)$delta[1]
boot::cv.glm(wisc_train, mod3, K = 5)$delta[1]
# install.packages("rpart")
# install.packages("rpart.plot")
library(rpart)
library(rpart.plot)
data("ptitanic")
ptitanic = na.omit(ptitanic)
set.seed(42)
trn_idx = sample(nrow(ptitanic), 300)
ptitanic_trn = ptitanic[trn_idx, ]
ptitanic_tst = ptitanic[-trn_idx, ]
tita_mod=glm(survived~pclass+sex+age+age:sex, data= ptitanic_trn, family="binomial")
deviance(tita_mod)
tita_mod
tita_mod=glm(survived~pclass+sex+age+age:sex, data= ptitanic_trn, family="binomial")
deviance(tita_mod)
tita_mod
tita_mod_null=glm(survived~sex+age+age:sex, data= ptitanic_trn, family="binomial")
anova(tita_mod_null, tita_mod, test="LRT")[["Deviance"]][2]
tita_mod_null
anova(tita_mod_null, tita_mod, test="LRT")[["Pr(>Chi)"]][2]
# install.packages("rpart")
# install.packages("rpart.plot")
library(rpart)
library(rpart.plot)
data("ptitanic")
ptitanic = na.omit(ptitanic)
set.seed(42)
trn_idx = sample(nrow(ptitanic), 300)
ptitanic_trn = ptitanic[trn_idx, ]
ptitanic_tst = ptitanic[-trn_idx, ]
tita_mod=glm(survived~pclass+sex+age+age:sex, data= ptitanic_trn, family="binomial")
deviance(tita_mod)
tita_mod
library(rpart)
library(rpart.plot)
data("ptitanic")
ptitanic = na.omit(ptitanic)
set.seed(42)
trn_idx = sample(nrow(ptitanic), 300)
ptitanic_trn = ptitanic[trn_idx, ]
ptitanic_tst = ptitanic[-trn_idx, ]
tita_mod=glm(survived~pclass+sex+age+age:sex, data= ptitanic_trn, family="binomial")
tita_mod
install.packages("rpart")
install.packages("rpart")
install.packages("rpart.plot")
install.packages("rpart.plot")
# install.packages("rpart")
# install.packages("rpart.plot")
library(rpart)
library(rpart.plot)
data("ptitanic")
ptitanic = na.omit(ptitanic)
set.seed(42)
trn_idx = sample(nrow(ptitanic), 300)
ptitanic_trn = ptitanic[trn_idx, ]
ptitanic_tst = ptitanic[-trn_idx, ]
tita_mod=glm(survived~pclass+sex+age+age:sex, data= ptitanic_trn, family="binomial")
deviance(tita_mod)
tita_mod
version
bike_sharing_data<-read.csv(file="day.csv",header=TRUE, sep=",")
View(bike_sharing_data)
bike_sharing_data<-read.csv(file="day.csv",header=TRUE, sep=",") # reading the dataset into memory
dim(bike_sharing_data) # dimensions of the dataset
head(bike_sharing_data$cnt) # printing first few rows of our target variable which is count of bikes
