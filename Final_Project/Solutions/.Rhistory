<br>
## Discussion
<br>
Our best model included both interactions and polynomial terms.
<br>
```{r cat_feature_dists}
par(mfrow=c(1,3))
barplot(prop.table(table(data$season)), col = 1:4, main = "Distribution of Season", xlab = "Season", ylab = "Count")
knitr::opts_chunk$set(echo = TRUE)
library(RColorBrewer)
library(faraway)
palette(brewer.pal(n = 12, name = "Set3"))
par(mfrow = c(2, 2))
plot(bike_mod_num,col = 'dodgerblue') # do diagnostics
knitr::opts_chunk$set(echo = TRUE)
library(RColorBrewer)
library(faraway)
palette(brewer.pal(n = 12, name = "Set3"))
data = read.csv("day.csv")
str(data)
data$season = as.factor(data$season)
levels(data$season) <- c("spring", "summer", "fall", "winter") # load it as a factor with levels
data$holiday = as.factor(data$holiday)
levels(data$holiday) = c("no", "yes") # load it as a factor with levels
data$workingday = as.factor(data$workingday)
levels(data$workingday) = c("no", "yes") # load it as a factor with levels
data$weathersit = as.factor(data$weathersit)
levels(data$weathersit) = c("Clearish", "Misty", "LightPrecip") # load it as a factor with levels
data$weekday = as.factor(data$weekday)
levels(data$weekday) = c("Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat") # load it as a factor with levels
data$mnth = as.factor(data$mnth)
levels(data$mnth) = c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec") # load it as a factor with levels
str(data) # look at the structure of transformed data
sum(is.na(data))
data=data[,c(-1,-2,-14,-15)] # remove instance, date, causal, registered variable since those are not needed for our model.
# function to calculate leave out out cross validated rmse
calc_loocv_rmse = function(model) {
temp=(resid(model) / (1 - hatvalues(model)))^2
temp=temp[is.finite(temp)]
sqrt(mean(temp))
}
numerical <- unlist(lapply(data, is.numeric)) # contains boolean value against each variable indicating whether that variable is a numeric or not
data_numerical= data[, numerical] # get the target and all the numerical columns
bike_mod_num = lm(cnt ~ ., data = data_numerical) # model with all numerical variables
summary(bike_mod_num)[["adj.r.squared"]] # get the adjusted r-squared
calc_loocv_rmse(bike_mod_num) # get the loocv rmse
summary(bike_mod_num)$coefficients[, 'Pr(>|t|)']
par(mfrow = c(2, 2))
plot(bike_mod_num,col = 'dodgerblue') # do diagnostics
par(mfrow = c(2, 2))
plot(bike_mod_num,col = 'dodgerblue') # do diagnostics
par(mfrow = c(2, 2))
plot(bike_mod_num,col = 'dodgerblue') # do diagnostics
par(mfrow = c(2, 2))
plot(bike_mod_num,col = 'dodgerblue') # do diagnostics
knitr::opts_chunk$set(echo = TRUE)
library(RColorBrewer)
library(faraway)
palette(brewer.pal(n = 12, name = "Set3"))
data = read.csv("day.csv")
str(data)
data$season = as.factor(data$season)
levels(data$season) <- c("spring", "summer", "fall", "winter") # load it as a factor with levels
data$holiday = as.factor(data$holiday)
levels(data$holiday) = c("no", "yes") # load it as a factor with levels
data$workingday = as.factor(data$workingday)
levels(data$workingday) = c("no", "yes") # load it as a factor with levels
data$weathersit = as.factor(data$weathersit)
levels(data$weathersit) = c("Clearish", "Misty", "LightPrecip") # load it as a factor with levels
data$weekday = as.factor(data$weekday)
levels(data$weekday) = c("Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat") # load it as a factor with levels
data$mnth = as.factor(data$mnth)
levels(data$mnth) = c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec") # load it as a factor with levels
str(data) # look at the structure of transformed data
sum(is.na(data))
data=data[,c(-1,-2,-14,-15)] # remove instance, date, causal, registered variable since those are not needed for our model.
# function to calculate leave out out cross validated rmse
calc_loocv_rmse = function(model) {
temp=(resid(model) / (1 - hatvalues(model)))^2
temp=temp[is.finite(temp)]
sqrt(mean(temp))
}
numerical <- unlist(lapply(data, is.numeric)) # contains boolean value against each variable indicating whether that variable is a numeric or not
data_numerical= data[, numerical] # get the target and all the numerical columns
bike_mod_num = lm(cnt ~ ., data = data_numerical) # model with all numerical variables
summary(bike_mod_num)[["adj.r.squared"]] # get the adjusted r-squared
calc_loocv_rmse(bike_mod_num) # get the loocv rmse
summary(bike_mod_num)$coefficients[, 'Pr(>|t|)']
par(mfrow = c(2, 2))
plot(bike_mod_num,col = 'dodgerblue') # do diagnostics
bike_mod_all=lm(cnt~., data=data) # model with all the variables
summary(bike_mod_all)[["adj.r.squared"]] # get the adjusted r-squared
calc_loocv_rmse(bike_mod_all) # get the loocv rmse
summary(bike_mod_all)$coefficients[, 'Pr(>|t|)'] # get the cofficeints
par(mfrow = c(2, 2))
plot(bike_mod_all,col = 'dodgerblue') # do diagnostics
bike_mod_w_month=lm(cnt~.-mnth, data=data) # model without month
bike_mod_w_weekday=lm(cnt~.-weekday, data=data) # model without weekday
bike_mod_w_workingday=lm(cnt~.-workingday, data=data) # model without workingday
anova(bike_mod_w_month,bike_mod_w_weekday,bike_mod_w_workingday,bike_mod_all) # do anova test
data_2= data[,c(-6)] # remove working day variable
bike_mod_all_2=lm(cnt~., data=data_2) # model with all remaining variable
summary(bike_mod_all_2)[["adj.r.squared"]] # get the adjusted r-squared
calc_loocv_rmse(bike_mod_all_2) # get the loocv rmse
vif(bike_mod_all_2)
temp_model_1 <- lm(temp ~ . - cnt, data = data_2)
temp_model_2 <- lm(cnt ~ . - temp, data = data_2)
cor(resid(temp_model_1), resid(temp_model_2))
temp_model_1 <- lm(temp ~ . - cnt - atemp, data = data_2)
temp_model_2 <- lm(cnt ~ . - temp - atemp, data = data_2)
cor(resid(temp_model_1), resid(temp_model_2))
temp_model_1 <- lm(atemp ~ . - cnt - temp, data = data_2)
temp_model_2 <- lm(cnt ~ . - atemp - temp, data = data_2)
cor(resid(temp_model_1), resid(temp_model_2))
data_3= data[,-8]
bike_mod_all_3=lm(cnt~., data=data_3)
summary(bike_mod_all_3)[["adj.r.squared"]] # get the adjusted r-squared
calc_loocv_rmse(bike_mod_all_3) # get the loocv rmse
yr_mod_0 <- lm(cnt ~ . - yr, data = data_3)
yr_mod_1 <- lm(yr ~ . - cnt, data = data_3)
cor(resid(yr_mod_0), resid(yr_mod_1))
sum(cooks.distance(bike_mod_all_3) > 4 / length(cooks.distance(bike_mod_all_3)))
cokks_distance = cooks.distance(bike_mod_all_3)
bike_mod_all_4 = lm(cnt ~.,
data = data_3,
subset = cokks_distance <= 4 / length(cokks_distance))
summary(bike_mod_all_4)[["adj.r.squared"]] # get the adjusted r-squared
calc_loocv_rmse(bike_mod_all_4) # get the loocv rmse
par(mfrow = c(2, 2))
plot(bike_mod_all_4,col = 'dodgerblue') # do diagnostics
bike_mod_all_5 = lm(cnt ~.^2,
data = data_3,
subset = cokks_distance <= 4 / length(cokks_distance))
summary(bike_mod_all_5)[["adj.r.squared"]] # get the adjusted r-squared
calc_loocv_rmse(bike_mod_all_5) # get the loocv rmse
par(mfrow = c(2, 2))
plot(bike_mod_all_5,col = 'dodgerblue') # do diagnostics
length(coef(bike_mod_all_5)) # get the number of params
bike_mod_all_6=step(bike_mod_all_5, trace=0, direction="backward")
length(coef(bike_mod_all_6)) # get the no of params
summary(bike_mod_all_6)[["adj.r.squared"]] # get the adjusted r-squared
calc_loocv_rmse(bike_mod_all_6) # get the loocv rmse
par(mfrow = c(2, 2))
plot(bike_mod_all_6,col = 'dodgerblue') # do diagnostics
temp_mod = lm(cnt ~ .+I(atemp^2)+I(hum^2)+I(windspeed^2),
data = data_3,
subset = cokks_distance <= 4 / length(cokks_distance))
bike_mod_all_7=step(temp_mod, trace=0, direction="backward")
summary(bike_mod_all_7)[["adj.r.squared"]] # get the adjusted r-squared
calc_loocv_rmse(bike_mod_all_7) # get the loocv rmse
par(mfrow = c(2, 2))
plot(bike_mod_all_7,col = 'dodgerblue') # do diagnostics
temp_m = lm(log(cnt) ~.^2,
data = data_3,
subset = cokks_distance <= 4 / length(cokks_distance))
bike_mod_all_8=step(temp_m, trace=0, direction="backward")
summary(bike_mod_all_8)[["adj.r.squared"]] # get the adjusted r-squared
par(mfrow = c(2, 2))
plot(bike_mod_all_8,col = 'dodgerblue') # do diagnostics
poisson_mod = glm(cnt ~ (. ^2),
data = data_3,
subset = cokks_distance <= 4 / length(cokks_distance), family=poisson)
bike_mod_all_9 = step(poisson_mod, trace=0, direction="backward")
filter = cokks_distance <= 4 / length(cokks_distance)
e <- data_3$cnt[filter] - bike_mod_all_9$fitted.values
temp=(e / (1 - hatvalues(bike_mod_all_9)))^2
temp=temp[is.finite(temp)]
sqrt(mean(temp))
par(mfrow = c(2, 2))
plot(bike_mod_all_9,col = 'dodgerblue') # do diagnostics
bike_mod_int_poly = lm(cnt ~(. ^ 2) + I(atemp^2) + I(hum^2) + I(windspeed^2),
data = data_3,
subset = cokks_distance <= 4 / length(cokks_distance))
bike_mod_all_10 = step(bike_mod_int_poly, trace=0, direction="backward")
summary(bike_mod_all_10)[["adj.r.squared"]] # get the adjusted r-squared
calc_loocv_rmse(bike_mod_all_10) # get the loocv rmse
bike_mod_int_poly_full = lm(cnt ~(. ^ 2) + I(atemp^2) + I(hum^2) + I(windspeed^2),
data = data_3)
bike_mod_all_11 = step(bike_mod_int_poly_full, trace=0, direction="backward")
cooks_distance = cooks.distance(bike_mod_all_11) # find influential observations and exclude them
filter = cooks_distance <= (4 / length(cooks_distance))
# some points have a cooks distance of NA, we will consider these to be outliers
filter[is.na(filter)] <- FALSE
bike_mod_int_poly_full = lm(cnt ~(. ^ 2) + I(atemp^2) + I(hum^2) + I(windspeed^2),
data = data_3,
subset = filter)
bike_mod_all_11 = step(bike_mod_int_poly_full, trace=0, direction="backward")
summary(bike_mod_all_11)[["adj.r.squared"]] # get the adjusted r-squared
calc_loocv_rmse(bike_mod_all_11) # get the loocv rmse
summary(bike_mod_all_11)$coef
plot(bike_mod_all_11$fitted.values, data_3$cnt[filter], main = "Fitted Values vs Actual", xlab = "Fitted Values", ylab = "Ground Truth", col = "darkblue", pch = 20)
abline(0, 1, col = "firebrick4", lwd = 3)
summary(bike_mod_all_11)$adj.r
par(mfrow = c(2, 2))
plot(bike_mod_all_11,col = 'dodgerblue') # do diagnostics
data = read.csv("day.csv")
summary(data$cnt)
hist(data$cnt, col = "lightslateblue", main = "Histogram of Total Ridership Count", xlab = "Total Ridership Count")
options(width = 1000)
summary(bike_mod_all_11)$coef
options(width = 10000)
summary(bike_mod_all_11)$coef
sqrt(mean(bike_mod_all_11$residuals^2))
sqrt(mean(bike_mod_all_11$residuals^2))
View(data)
bike_mod_all_11$residuals
sqrt(mean(resid(bike_mod_all_11)^2))
library(lmetest)
library(lmtest)
bptest(bike_mod_all_11)
shapiro.test(bike_mod_all_11)
shapiro.test(resid(bike_mod_all_11))
hist(resid(bike_mod_all_11))
hist(resid(bike_mod_all_11), col="dodgerorange")
hist(resid(bike_mod_all_11), col = "lightslateblue", main = "Histogram of Residuals", xlab = "Residuals")
hist(resid(bike_mod_all_11), col = "lightslateblue", main = "Histogram of Residuals", xlab = "Residuals")
hist(resid(bike_mod_all_11), col = "lightslateblue", main = "Histogram of Residuals", xlab = "Residuals")
